#  Standard GALAHAD compilation and run instructions

#  Nick Gould, for GALAHAD production
#  This version: 2021-04-29

#  compilation agenda for package

S$(PACKAGE) = $(DEPENDENCIES) $(LGS)($(package).o)
D$(PACKAGE) = $(DEPENDENCIES) $(LGD)($(package).o)

#  additional run agenda

SRUN$(PACKAGE) = $(TESTDEPS) $(LGS)(use$(package).o) $(OBJS)/run$(package)_sif.o
DRUN$(PACKAGE) = $(TESTDEPS) $(LGD)(use$(package).o) $(OBJD)/run$(package)_sif.o

#  libraries used when linking for tests

LIBS = -lgalahad $(HSL) $(SPRAL) $(MKL_PARDISO) $(PARDISO) $(WSMP) $(METIS) \
                 $(LAPACK) $(BLAS)

#  compilation and run agenda

$(PACKAGE)OBJECTSS = $(S$(PACKAGE))
$(PACKAGE)OBJECTSD = $(D$(PACKAGE))
$(PACKAGE)OBJECTSS_CUTEST = $(S$(PACKAGE)) $(SRUN$(PACKAGE))
$(PACKAGE)OBJECTSD_CUTEST = $(D$(PACKAGE)) $(DRUN$(PACKAGE))

OBJECTSS_CUTEST = $($(PACKAGE)OBJECTSS_CUTEST)
OBJECTSD_CUTEST = $($(PACKAGE)OBJECTSD_CUTEST)

#  test agenda

$(PACKAGE)DS = $(D$(PACKAGE)) $(OBJD)/$(package)s.o
$(PACKAGE)DS2 = $(D$(PACKAGE)) $(OBJD)/$(package)s2.o
$(PACKAGE)DS3 = $(D$(PACKAGE)) $(OBJD)/$(package)s3.o
$(PACKAGE)DT = $(D$(PACKAGE)) $(OBJD)/$(package)t.o
$(PACKAGE)SS = $(S$(PACKAGE)) $(OBJS)/$(package)s.o
$(PACKAGE)SS2 = $(S$(PACKAGE)) $(OBJS)/$(package)s2.o
$(PACKAGE)SS3 = $(S$(PACKAGE)) $(OBJS)/$(package)s3.o
$(PACKAGE)ST = $(S$(PACKAGE)) $(OBJS)/$(package)t.o

R$(PACKAGE)DS = $(OBJD)/$(package)s.o -L$(OBJD) $(LIBS)
R$(PACKAGE)DS2 = $(OBJD)/$(package)s2.o -L$(OBJD) $(LIBS)
R$(PACKAGE)DS3 = $(OBJD)/$(package)s3.o -L$(OBJD) $(LIBS)
R$(PACKAGE)DT = $(OBJD)/$(package)t.o -L$(OBJD) $(LIBS)
R$(PACKAGE)SS = $(OBJS)/$(package)s.o -L$(OBJS) $(LIBS)
R$(PACKAGE)SS2 = $(OBJS)/$(package)s2.o -L$(OBJS) $(LIBS)
R$(PACKAGE)SS3 = $(OBJS)/$(package)s3.o -L$(OBJS) $(LIBS)
R$(PACKAGE)ST = $(OBJS)/$(package)t.o -L$(OBJS) $(LIBS)

#  =========================================================================
#  ========================== makefile stanza ==============================
#  =========================================================================

#  main compilations and runs

all: $(package)_cutest
all_$(package): $(package)_cutest
test: test_$(package)
test_nocutest: test_$(package)_nocutest

# package for cutest

$(package)_cutest: $(package)_cutest_$(PRECIS)
	@printf ' %-21s\n' "GALAHAD: $(PACKAGE) ($(PRECIS) $(SUCC_CUTEST)"
$(package)_cutest_single: $($(PACKAGE)OBJECTSS_CUTEST)
	$(RANLIB) $(LGS)
$(package)_cutest_double: $($(PACKAGE)OBJECTSD_CUTEST)
	$(RANLIB) $(LGD)

#  silent package

$(package)_silent: $(package)_silent_$(PRECIS)
$(package)_silent_single: $($(PACKAGE)OBJECTSS)
$(package)_silent_double: $($(PACKAGE)OBJECTSD)

#  package

$(package): $(package)_$(PRECIS)
	@printf ' %-21s\n' "GALAHAD: $(PACKAGE) ($(PRECIS) $(SUCC)"
$(package)_single: $($(PACKAGE)OBJECTSS)
	$(RANLIB) $(LGS)
$(package)_double: $($(PACKAGE)OBJECTSD)
	$(RANLIB) $(LGD)

#  run package

$(package)srunall: $(package)ss $(package)ss2 $(package)ss3 $(package)st
$(package)drunall: $(package)ds $(package)ds2 $(package)ds3 $(package)dt
$(package)runall: $(package)drunall $(package)srunall

#  test package

test_$(package): test_$(package)_$(PRECIS)

test_$(package)_single: $(package)st $(SRUN$(PACKAGE))
	echo ""
	echo " Testing CUTEst interface to $(package)"
	cd $(GALAHAD)/examples ; sdgal $(VERSION) $(package) -s QPBAND
	echo ""
	echo " Tests for $(package) complete"

test_$(package)_double: $(package)dt $(DRUN$(PACKAGE))
	echo ""
	echo " Testing CUTEst interface to $(package)"
	cd $(GALAHAD)/examples ; sdgal $(VERSION) $(package) QPBAND
	echo ""
	echo " Tests for $(package) complete"

test_$(package)_nocutest: test_$(package)_nocutest_$(PRECIS)

test_$(package)_nocutest_single: $(package)st
	echo ""
	echo " Tests for $(package) complete"

test_$(package)_nocutest_double: $(package)dt
	echo ""
	echo " Tests for $(package) complete"

#  run specification document example tests

$(package)ss: $($(PACKAGE)SS)
	$(FORTRAN) $(RUNFFLAGSOMP) $(SPECIAL) -o run_$(package) \
                                                     $(R$(PACKAGE)SS)
	- ./run_$(package) >& $(package)s.output
	cat $(package)s.output
	rm ./run_$(package)

$(package)ss2: $($(PACKAGE)SS2)
	$(FORTRAN) $(RUNFFLAGSOMP) $(SPECIAL) -o run_$(package) \
                                                     $(R$(PACKAGE)SS2)
	- ./run_$(package) >& $(package)s2.output
	cat $(package)s2.output
	rm ./run_$(package)

$(package)ss3: $($(PACKAGE)SS3)
	$(FORTRAN) $(RUNFFLAGSOMP) $(SPECIAL) -o run_$(package) \
                                                     $(R$(PACKAGE)SS3)
	- ./run_$(package) >& $(package)s3.output
	cat $(package)s3.output
	rm ./run_$(package)

$(package)ds: $($(PACKAGE)DS)
	$(FORTRAN) $(RUNFFLAGSOMP) $(SPECIAL) -o run_$(package) \
                                                     $(R$(PACKAGE)DS)
	- ./run_$(package) >& $(package)ds.output
	cat $(package)ds.output
	rm ./run_$(package)

$(package)ds2: $($(PACKAGE)DS2)
	$(FORTRAN) $(RUNFFLAGSOMP) $(SPECIAL) -o run_$(package) \
                                                     $(R$(PACKAGE)DS2)
	- ./run_$(package) >& $(package)ds2.output
	cat $(package)ds2.output
	rm ./run_$(package)

$(package)ds3: $($(PACKAGE)DS3)
	$(FORTRAN) $(RUNFFLAGSOMP) $(SPECIAL) -o run_$(package) \
                                                     $(R$(PACKAGE)DS3)
	- ./run_$(package) >& $(package)ds3.output
	cat $(package)ds3.output
	rm ./run_$(package)

#  run comprehensive example tests

$(package)st: $($(PACKAGE)ST)
	echo " Exhaustive test of subroutine interface to $(package)"
	$(FORTRAN) $(RUNFFLAGSOMP) $(SPECIAL) -o run_$(package) \
                                                     $(R$(PACKAGE)ST)
	- ./run_$(package) >& $(package)t.output
	cat $(package)t.output
	rm ./run_$(package)

$(package)dt: $($(PACKAGE)DT)
	echo " Exhaustive test of subroutine interface to $(package)"
	$(FORTRAN) $(RUNFFLAGSOMP) $(SPECIAL) -o run_$(package) \
                                                     $(R$(PACKAGE)DT)
	- ./run_$(package) >& $(package)dt.output
	cat $(package)dt.output
	rm ./run_$(package)

#  package compilation

$(package).o: $(LG)($(package).o)

$(LG)($(package).o): ../$(package)/$(package).f90
	@printf ' %-9s %-15s\t\t' "Compiling" "$(package)   "
	$(SED) -f $(SEDS) ../$(package)/$(package).f90 > $(OBJ)/$(package)1.f90
	$(SED) -f $(LSEDS) $(OBJ)/$(package)1.f90 > $(OBJ)/$(package)2.f90
	$(SED) -f $(LPSEDS) $(OBJ)/$(package)2.f90 > $(OBJ)/$(package)3.f90
	$(SED) "s/^.$(NOT95)/     /" \
                $(OBJ)/$(package)3.f90 > $(OBJ)/$(package).f90
	cd $(OBJ); $(FORTRAN) -o $(package).o $(FFLAGSS) $(package).f90 \
                || ( printf ' %-26s' "=> Disabling optimization " ; \
                   $(FORTRAN) -o $(package).o $(FFLAGSN) $(package).f90 )
	cd $(OBJ); $(ARR) $(package).o ; \
                   $(RM) $(package).f90 $(package)1.f90 $(package)2.f90 \
                         $(package)3.f90 $(package).o
	$(RMARFILES) $(DEPENDS)
	$(RMARFILE) use$(package).o
	$(RMOBFILE) $(package)s.o
	$(RMOBFILE) $(package)s2.o
	$(RMOBFILE) $(package)s3.o
	$(RMOBFILE) $(package)t.o
	$(MVMODS)
	@printf '[ OK ]\n'

#  package coverage compilation

$(package)_gcov: ../$(package)/$(package).f90
	@printf ' %-9s %-15s\t\t' "Compiling" "$(package)   "
	$(SED) -f $(SEDS) ../$(package)/$(package).f90 > $(package)1.f90
	$(SED) -f $(LSEDS) $(package)1.f90 > $(package)2.f90
	$(SED) -f $(LPSEDS) $(package)2.f90 > $(package)3.f90
	$(SED) "s/^.$(NOT95)/     /" $(package)3.f90 > $(package)_cov.f90
	$(RM) ./$(package)1.f90 ./$(package)2.f90 ./$(package)3.f90
	$(FORTRAN) -o $(package)_cov.o $(FFLAGSS) $(COVERAGE) \
            $(package)_cov.f90 \
          || ( printf ' %-26s' "=> Disabling optimization " ; \
            $(FORTRAN) -o $(package)_cov.o $(FFLAGSN) $(COVERAGE) \
              $(package)_cov.f90 )
	$(SED) -f $(SEDS) $(package)t.f90 > $(package)t_cov1.f90
	$(SED) -f $(LSEDS) $(package)t_gcov1.f90 > $(package)t_cov.f90
	$(RM) ./$(package)t_cov1.f90
	$(FORTRAN) -g $(BASIC) $(NOOPTIMIZATION) $(MODULES) $(COVERAGE) \
          $(package)t_cov.f90
	$(FORTRAN) $(NOOPTIMIZATION) $(MODULES) $(COVERAGE) \
          -o ./$(package)_cov $(package)_cov.o $(package)t_cov.o \
           -L$(OBJ) $(LIBS)
	./$(package)_gcov
	gcov ./$(package)_gcov
	$(MV) ./$(package)_cov.f90.cov ./$(package)_coverage
	$(RM) ./$(package)*cov* ./galahad_$(package)_*.mod

#  CUTEst/AMPL interfaces

use$(package).o: $(LG)(use$(package).o)

$(LG)(use$(package).o): ../$(package)/use$(package).f90
	@printf ' %-9s %-15s\t\t' "Compiling" "use$(package)   "
	$(SED) -f $(SEDS) \
           ../$(package)/use$(package).f90 > $(OBJ)/use$(package)1.f90
	$(SED) -f $(LSEDS) $(OBJ)/use$(package)1.f90 > $(OBJ)/use$(package)2.f90
	$(SED) "s/^.$(NOT95)/     /" \
          $(OBJ)/use$(package)2.f90 > $(OBJ)/use$(package).f90
	cd $(OBJ); \
          $(FORTRAN) -o use$(package).o $(FFLAGSOMP) use$(package).f90 \
                || ( printf ' %-26s' "=> Disabling optimization " ; \
                   $(FORTRAN) -o use$(package).o $(FFLAGSN) use$(package).f90 )
	cd $(OBJ); $(ARR) use$(package).o ; \
                   $(RM) use$(package).f90 use$(package)1.f90 \
                                       use$(package)2.f90 use$(package).o
	$(RMOBFILE) run$(package)_sif.o
	$(MVMODS)
	@printf '[ OK ]\n'

#  main program

run$(package)_sif.o: $(OBJ)/run$(package)_sif.o

$(OBJ)/run$(package)_sif.o: ../$(package)/run$(package)_sif.f90
	@printf ' %-9s %-15s\t\t' "Compiling" "run$(package)_sif"
	$(SED) -f $(SEDS) \
           ../$(package)/run$(package)_sif.f90 > $(OBJ)/run$(package)_sif.f90
	cd $(OBJ); $(FORTRAN) -o run$(package)_sif.o \
                     $(FFLAGSS) run$(package)_sif.f90
	rm $(OBJ)/run$(package)_sif.f90
	@printf '[ OK ]\n'

#  test programs for specification document

$(package)s.o: $(OBJ)/$(package)s.o

$(OBJ)/$(package)s.o: ../$(package)/$(package)s.f90
	@printf ' %-9s %-15s\t\t' "Compiling" "$(package)s  "
	$(SED) -f $(SEDS) \
           ../$(package)/$(package)s.f90 > $(OBJ)/$(package)s1.f90
	$(SED) -f $(LSEDS) $(OBJ)/$(package)s1.f90 > $(OBJ)/$(package)s.f90
	cd $(OBJ) ; $(FORTRAN) -o $(package)s.o $(FFLAGS) $(package)s.f90
	rm $(OBJ)/*.f90
	@printf '[ OK ]\n'

$(package)s2.o: $(OBJ)/$(package)s2.o

$(OBJ)/$(package)s2.o: ../$(package)/$(package)s2.f90
	@printf ' %-9s %-15s\t\t' "Compiling" "$(package)s2  "
	$(SED) -f $(SEDS) \
           ../$(package)/$(package)s2.f90 > $(OBJ)/$(package)s1.f90
	$(SED) -f $(LSEDS) $(OBJ)/$(package)s1.f90 > $(OBJ)/$(package)s2.f90
	cd $(OBJ) ; $(FORTRAN) -o $(package)s2.o $(FFLAGS) $(package)s2.f90
	rm $(OBJ)/*.f90
	@printf '[ OK ]\n'

$(package)s3.o: $(OBJ)/$(package)s3.o

$(OBJ)/$(package)s3.o: ../$(package)/$(package)s3.f90
	@printf ' %-9s %-15s\t\t' "Compiling" "$(package)s3  "
	$(SED) -f $(SEDS) \
            ../$(package)/$(package)s3.f90 > $(OBJ)/$(package)s1.f90
	$(SED) -f $(LSEDS) $(OBJ)/$(package)s1.f90 > $(OBJ)/$(package)s3.f90
	cd $(OBJ) ; $(FORTRAN) -o $(package)s3.o $(FFLAGS) $(package)s3.f90
	rm $(OBJ)/*.f90
	@printf '[ OK ]\n'

#  comprehensive test programs

$(package)t.o: $(OBJ)/$(package)t.o

$(OBJ)/$(package)t.o: ../$(package)/$(package)t.f90
	@printf ' %-9s %-15s\t\t' "Compiling" "$(package)t  "
	$(SED) -f $(SEDS) \
           ../$(package)/$(package)t.f90 > $(OBJ)/$(package)t1.f90
	$(SED) -f $(LSEDS) $(OBJ)/$(package)t1.f90 > $(OBJ)/$(package)t.f90
	cd $(OBJ) ; $(FORTRAN) -o $(package)t.o $(FFLAGSS) $(package)t.f90
	rm $(OBJ)/*.f90
	@printf '[ OK ]\n'

#  book keeping

clean:
	@printf ' %-9s\t\t' "Removing $(package) files"
	$(RMARFILE) $(package).o
	$(RM) $(OBJ)/$(package)t.o $(OBJ)/$(package)s.o
	@printf '[ OK ]\n'

cleanall:
	@printf ' %-14s\t\t' \
          "Removing all $(PRECIS) precision object and module files"
	$(RM) $(OBJ)/* $(MOD)/*
	@printf '[ OK ]\n'
